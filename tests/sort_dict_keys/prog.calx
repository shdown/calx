fun CopySlice(xs, begin, end) {
    ys := []
    for (i := begin; i < end; i += 1) {
        ys[@ys] = xs[i]
    }
    return ys
}

fun CompareLess(a, b) {
    if (a == nil) {
        if (b == nil) {
            return nil
        }
        return false
    }
    if (b == nil) {
        return true
    }
    return a < b
}

fun MergeSort(xs) {
    n := @xs
    if (n <= 1) {
        return
    }

    half := n // 2
    left := CopySlice(xs, 0, half)
    right := CopySlice(xs, half, n)
    MergeSort(left)
    MergeSort(right)

    i := 0
    j := 0
    for (;;) {
        x := left[i]
        y := right[j]
        less := CompareLess(x, y)
        if (less == nil) {
            break
        }
        if (less) {
            xs[i + j] = x
            i += 1
        } else {
            xs[i + j] = y
            j += 1
        }
    }
}

fun DictKeysAsList(d) {
    ks := []
    for (k := NextKey(d, nil); k; k = NextKey(d, k)) {
        ks[@ks] = k
    }
    return ks
}

d := {
    "alpha": "α",
    "beta": "β",
    "gamma": "γ",
    "delta": "δ"
}
ks := DictKeysAsList(d)
MergeSort(ks)
ks
